// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package runtime

import (
	"context"
	"exchange-backend/internal/api"
	"exchange-backend/internal/config"
	"exchange-backend/internal/pkg/ethereum"
	"exchange-backend/internal/pkg/etherscan"
	"exchange-backend/internal/pkg/job"
	"exchange-backend/internal/pkg/locker"
	"exchange-backend/internal/pkg/snowflake"
	"exchange-backend/internal/repo"
	"exchange-backend/internal/service"
)

// Injectors from wire.go:

func build(ctx context.Context, cfg *config.Config) (*Runtime, func(), error) {
	node, cleanup, err := snowflake.NewNode(ctx, cfg)
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := locker.ProvideClient(ctx, cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	repoRepo, cleanup3, err := repo.ProvideRepo(ctx, cfg, node, client)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	etherscanClient := etherscan.ProvideClient(cfg)
	ethereumClient, cleanup4, err := ethereum.ProvideClient(ctx, cfg)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	jobClient, cleanup5, err := job.ProvideClient(ctx, cfg)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serviceService := service.NewService(ctx, cfg, repoRepo, etherscanClient, ethereumClient, client, jobClient)
	backend := api.NewBackend(cfg, serviceService)
	runtime, err := NewRuntime(ctx, cfg, serviceService, ethereumClient, jobClient, backend)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return runtime, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
